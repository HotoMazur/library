services:
#  app:
#    image: openjdk:23-jdk-alpine
#    build:
#      context: .
#      dockerfile: Dockerfile
#    ports:
#      - "8085:8085"
#    environment:
#      - DB_HOST=db
#      - DB_PORT=5432
#      - DB_NAME=library
#      - DB_USER=postgres
#      - DB_PASSWORD=postgres
#    stdin_open: true
#    volumes:
#      - ./logs:/app/logs
#    tty: true
#    depends_on:
#      db:
#        condition: service_healthy

  db:
    container_name: library-db
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=library
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9096:9096"
      - "9097:9097"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9097"  # Updated to use 'kafka' hostname
      KAFKA_LISTENERS: PLAINTEXT://kafka:9096,CONTROLLER://kafka:9097
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9096  # Use 'kafka' hostname
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/var/lib/kafka/data
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge